docker - attached mode

172.17.0.1 - conatiner ip  - docker inspect <>

docker is just a process,, but how can you execute something inside it?


ps -ef - shows all the processes running


conatiner itself is a process.. all the processes inside a conatiner is also executing inside the host. so if we kill something from host also killed in conatiner

orphan processes?
docker designed to work with linux - but in windows- we will have WSL
 
var/lib/docker -> contains containers/ -? conatins folders of all the conatiners(killed and running)
this is called writable layer of the container (containe images are readonly)-butthis exists only in that machine..



IMAGE:

IMAGES are layered file systems.
 wrtable layer is overlay2
writable layer can be found in graph driver 
image layers are stored in root directory of overlay2
the default storage driver is overlay2 , thats why its stored there.

root@ip-172-31-32-57:/var/lib# cd docker
root@ip-172-31-32-57:/var/lib/docker# ls
buildkit  containers  engine-id  image  network  overlay2  plugins  runtimes  swarm  tmp  volumes
root@ip-172-31-32-57:/var/lib/docker# cd overlay2/
root@ip-172-31-32-57:/var/lib/docker/overlay2# ls
l
root@ip-172-31-32-57:/var/lib/docker/overlay2#
root@ip-172-31-32-57:/var/lib/docker/overlay2#
root@ip-172-31-32-57:/var/lib/docker/overlay2# docker pull nginx
Using default tag: latest
latest: Pulling from library/nginx
b1badc6e5066: Pull complete
a2da0c0f2353: Pull complete
e5d9bb0b85cc: Pull complete
14a859b5ba24: Pull complete
716cdf61af59: Pull complete
14e422fd20a0: Pull complete
c3741b707ce6: Pull complete
Digest: sha256:33e0bbc7ca9ecf108140af6288c7c9d1ecc77548cbfd3952fd8466a75edefe57
Status: Downloaded newer image for nginx:latest
docker.io/library/nginx:latest
root@ip-172-31-32-57:/var/lib/docker/overlay2# ls
2310463dceb88a6ba1c7440b4c3fd90d3a05380863680882bfd4bfacd5344931  d03828e7aa3059776552bb915e6c952c2f96aec82cc3e834789c86e18b090865
5c79680d93887cb90cef947aa773d0cb1aeb9e23f8b39608444546edddf2e68f  d147857969172d37dfa7954123161b0b62a2d6d46fad446de969658e55cc72ef
74c98baa2bc911b375569dacd9cc1e912bd79a8a870a1a5199b3b7078e8dc975  ec95db3b3845a701d74060290fb0f1083bb2ca53d48394a422770fb3313d9fee
84efc39719015bc7d15544ad4b1d38c1c5cff5303ba01290b1c51968261a2547  l
root@ip-172-31-32-57:/var/lib/docker/overlay2# docker image inspect nginx
[
    {
        "Id": "sha256:ad5708199ec7d169c6837fe46e1646603d0f7d0a0f54d3cd8d07bc1c818d0224",
        "RepoTags": [
            "nginx:latest"
        ],
        "RepoDigests": [
            "nginx@sha256:33e0bbc7ca9ecf108140af6288c7c9d1ecc77548cbfd3952fd8466a75edefe57"
        ],
        "Parent": "",
        "Comment": "buildkit.dockerfile.v0",
        "Created": "2025-08-13T16:34:01Z",
        "DockerVersion": "",
        "Author": "",
        "Config": {
            "Hostname": "",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "ExposedPorts": {
                "80/tcp": {}
            },
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "NGINX_VERSION=1.29.1",
                "NJS_VERSION=0.9.1",
                "NJS_RELEASE=1~bookworm",
                "PKG_RELEASE=1~bookworm",
                "DYNPKG_RELEASE=1~bookworm"
            ],
            "Cmd": [
                "nginx",
                "-g",
                "daemon off;"
            ],
            "Image": "",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": [
                "/docker-entrypoint.sh"
            ],
            "OnBuild": null,
            "Labels": {
                "maintainer": "NGINX Docker Maintainers <docker-maint@nginx.com>"
            },
            "StopSignal": "SIGQUIT"
        },
        "Architecture": "amd64",
        "Os": "linux",
        "Size": 192385800,
        "GraphDriver": {
            "Data": {
                "LowerDir": "/var/lib/docker/overlay2/74c98baa2bc911b375569dacd9cc1e912bd79a8a870a1a5199b3b7078e8dc975/diff:/var/lib/docker/overlay2/84efc39719015bc7d15544ad4b1d38c1c5cff5303ba01290b1c51968261a2547/diff:/var/lib/docker/overlay2/2310463dceb88a6ba1c7440b4c3fd90d3a05380863680882bfd4bfacd5344931/diff:/var/lib/docker/overlay2/d03828e7aa3059776552bb915e6c952c2f96aec82cc3e834789c86e18b090865/diff:/var/lib/docker/overlay2/d147857969172d37dfa7954123161b0b62a2d6d46fad446de969658e55cc72ef/diff:/var/lib/docker/overlay2/ec95db3b3845a701d74060290fb0f1083bb2ca53d48394a422770fb3313d9fee/diff",
                "MergedDir": "/var/lib/docker/overlay2/5c79680d93887cb90cef947aa773d0cb1aeb9e23f8b39608444546edddf2e68f/merged",
                "UpperDir": "/var/lib/docker/overlay2/5c79680d93887cb90cef947aa773d0cb1aeb9e23f8b39608444546edddf2e68f/diff",
                "WorkDir": "/var/lib/docker/overlay2/5c79680d93887cb90cef947aa773d0cb1aeb9e23f8b39608444546edddf2e68f/work"
            },
            "Name": "overlay2"
        },
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:eb5f13bce9936c760b9fa73aeb1b608787daa36106cc888104132e353ed37252",
                "sha256:dab69e9f41e95b695c830dd40de509cac70228535889014e632834462f5683fa",
                "sha256:39bc11fab5202a44b1cd5ce2dffd1db01a5e4fbf6dbf3382be700b2b5b337fe8",
                "sha256:2988603ca26438649eac2757fb9dd9ba08319f432d4971420cfa2134a4dcafa7",
                "sha256:a0e5983a25a50e0523bf004411cbbbfc08b6735096460ec2e3e0e919633632c1",
                "sha256:129b375526fcf7be9015a58cd3abf6f623b6f82244e575de11905b9bad61e8f7",
                "sha256:45c2d10807fb1f09c464da6f87fc08f863031b0cff7689378e2fa8f9ac6956bd"
            ]
        },
        "Metadata": {
            "LastTagTime": "0001-01-01T00:00:00Z"
        }
    }
]
root@ip-172-31-32-57:/var/lib/docker/overlay2#


docker image layers ? study - -COW - COPY ON WRITE
lots of layers in conatine rimage- reduces performances
to reduce number of layers - combine commands
multistage image build
image caching? 


COPY and ADD ? differnce 
Add can be used for downloading contnets from internet
copy - copies from local machine only (or host) 
better to use copy 
or instead of add - - use curl or wget
this allows combining run layer into other RUN commands to reduce the no. of layers in the image

Volumes:

types: 
bindmounts
volumes-types anonymous and named
TempFS - supported on linux only - in tmpFs when the container goes off the volume also goes. 
then y is it needed? : in order to reduce the size of the writable data - thus container loads very fast

docker volumes:
stored inside the dockers root directory(controlled by docker -- access to ony root users) - inside that there is a folder called volume -> inside which a  volume is created.


# üê≥ Docker Storage: **Bind Mount vs Volume**

---

## üîπ 1. **Bind Mount**

* A **bind mount** directly maps a directory/file from the **host machine** into the container.
* You **choose the exact path** on the host.
* Example:

  ```bash
  docker run -v /home/minnu/data:/app/data ubuntu
  ```

  * `/home/minnu/data` ‚Üí directory on the host.
  * `/app/data` ‚Üí directory inside the container.
  * Whatever you write in `/app/data` is immediately reflected in `/home/minnu/data` on host, and vice versa.

‚úÖ **Pros**:

* Very fast, direct mapping.
* You control exactly where data is stored.

‚ùå **Cons**:

* Not portable (depends on host paths).
* Harder to manage when moving containers between servers.
* Permissions can get messy.

---

## üîπ 2. **Volume**

* A **volume** is managed by Docker itself (stored under `/var/lib/docker/volumes/`).
* You **don‚Äôt worry about host paths**; Docker manages it.
* Example:

  ```bash
  docker run -v my-volume:/app/data ubuntu
  ```

  * `my-volume` ‚Üí a Docker-managed volume.
  * `/app/data` ‚Üí container directory.
  * Data is stored in `/var/lib/docker/volumes/my-volume/_data` on host, but you don‚Äôt have to care.

‚úÖ **Pros**:

* Portable ‚Üí can easily move between hosts (via `docker volume` commands).
* Cleaner and safer ‚Üí Docker manages everything.
* Works better with Docker Swarm / Kubernetes.

‚ùå **Cons**:

* Slightly less transparent (you don‚Äôt control the exact host path unless you inspect it).

---

## üîπ 3. Key Differences

| Feature          | **Bind Mount**                       | **Volume**                                      |
| ---------------- | ------------------------------------ | ----------------------------------------------- |
| Storage location | Anywhere on host (you decide path)   | Managed by Docker (`/var/lib/docker/volumes/‚Ä¶`) |
| Portability      | ‚ùå Host-path dependent                | ‚úÖ Portable, managed by Docker                   |
| Management       | Manual (host filesystem)             | `docker volume` commands                        |
| Performance      | Very fast                            | Fast, but slightly abstracted                   |
| Common use cases | Dev/testing with host files, configs | Databases, persistent app data                  |

---

## üîπ 4. Example Comparison

üëâ Bind Mount:

```bash
docker run -it -v /home/minnu/code:/app ubuntu
```

* Maps your local `/home/minnu/code` directly to `/app` inside container.
* Great for development (live code editing).

üëâ Volume:

```bash
docker run -it -v my-db:/var/lib/mysql mysql
```

* Stores database data in Docker-managed volume `my-db`.
* Data persists even if container is deleted.

---

‚úÖ **Rule of Thumb**:

* **Bind Mounts** ‚Üí good for **development** (code sharing, testing).
* **Volumes** ‚Üí good for **production** (persistent data, DBs, portability).

---

Would you like me to also explain how **overlay filesystem (COW)** works with these volumes/bind mounts (i.e., how they bypass the writable container layer)?





