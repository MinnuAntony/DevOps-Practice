# Stage 1: Build React app
FROM node:20.11-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN npm ci --no-audit --no-fund
COPY . .
RUN npm run build && npm cache clean --force

# Stage 2: Serve with Nginx
FROM nginx:1.25.3-alpine
COPY nginx.conf /etc/nginx/conf.d/default.conf
COPY --from=build /app/dist /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]


RUN npm ci --no-audit --no-fund
Installs exact versions of dependencies using package-lock.json.
ci is faster and more reproducible than install (good for builds).
--no-audit: skips security audit step (faster builds).
--no-fund: suppresses funding messages.
This produces a node_modules folder inside /app.


FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt \
    && python -m compileall .  
COPY . .
RUN addgroup --system appgroup && adduser --system --ingroup appgroup appuser \
    && chown -R appuser:appgroup /app
USER appuser
EXPOSE 5000
CMD ["python", "-m", "app.main"]



# --- Build Stage ---
FROM golang:1.21-alpine AS builder
RUN apk add --no-cache git ca-certificates
WORKDIR /app
COPY . .
RUN go mod tidy
RUN CGO_ENABLED=0 GOOS=linux go build -ldflags="-s -w" -o expense-service main.go

# --- Run Stage ---
FROM scratch
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /app/expense-service /expense-service

USER 1000:1000
EXPOSE 8080
CMD ["/expense-service"]

scratch is not a real image you can pull from Docker Hub.
It’s an empty base image — literally nothing inside:
No Linux distribution
No shell (sh, bash)
No package manager (apk, apt, yum)
No utilities (ls, cat, etc.)






