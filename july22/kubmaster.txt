sudo su
hostnamectl set-hostname kmaster
kubeadm init
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
hostname
kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
watch -n 1 kubectl get po -n kube-system
kubectl run minnupod --image=nginx
kubectl get pod
kubectl get pod
kubectl get pod -o wide
kubectl get pod
kubectl get pod -o wide
curl 10.44.0.3






minnu@hplaptop-minnu:~$ cd Downloads
minnu@hplaptop-minnu:~/Downloads$ ssh -i minnunv.pem ubuntu@34.207.91.131
The authenticity of host '34.207.91.131 (34.207.91.131)' can't be established.
ED25519 key fingerprint is SHA256:Qo2z6rlVNjW5fRsWjSMqB3tRvJDBwblmOPC2oqsByPg.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '34.207.91.131' (ED25519) to the list of known hosts.
Welcome to Ubuntu 20.04.6 LTS (GNU/Linux 5.15.0-1036-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Tue Jul 22 12:55:32 UTC 2025

  System load:  0.0                Processes:             111
  Usage of /:   14.7% of 28.89GB   Users logged in:       0
  Memory usage: 3%                 IPv4 address for eth0: 172.31.86.217
  Swap usage:   0%

 * Ubuntu Pro delivers the most comprehensive open source security and
   compliance features.

   https://ubuntu.com/aws/pro

Expanded Security Maintenance for Applications is not enabled.

0 updates can be applied immediately.

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


The list of available updates is more than a week old.
To check for new updates run: sudo apt update

Last login: Thu May  9 16:16:17 2024 from 103.184.239.192
ubuntu@ip-172-31-86-217:~$ sudo su
root@ip-172-31-86-217:/home/ubuntu# hostnamectl set-hostname kmaster
root@ip-172-31-86-217:/home/ubuntu#  kubeadm init
I0722 13:00:01.343418    3199 version.go:256] remote version is much newer: v1.33.3; falling back to: stable-1.26
[init] Using Kubernetes version: v1.26.15
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [kmaster kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 172.31.86.217]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [kmaster localhost] and IPs [172.31.86.217 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [kmaster localhost] and IPs [172.31.86.217 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 7.502603 seconds
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config" in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node kmaster as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
[mark-control-plane] Marking the node kmaster as control-plane by adding the taints [node-role.kubernetes.io/control-plane:NoSchedule]
[bootstrap-token] Using token: v0grzm.o4uudrv78ydkvcgi
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.86.217:6443 --token v0grzm.o4uudrv78ydkvcgi \
	--discovery-token-ca-cert-hash sha256:6eb2e0416bb958e48957b675ef8f46fa7c072d1d38a126a7628ff331ee905355 
root@ip-172-31-86-217:/home/ubuntu# mkdir -p $HOME/.kube
root@ip-172-31-86-217:/home/ubuntu#   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
root@ip-172-31-86-217:/home/ubuntu#   sudo chown $(id -u):$(id -g) $HOME/.kube/config
root@ip-172-31-86-217:/home/ubuntu# 
root@ip-172-31-86-217:/home/ubuntu# 
root@ip-172-31-86-217:/home/ubuntu# hostname
kmaster
root@ip-172-31-86-217:/home/ubuntu# kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
serviceaccount/weave-net created
clusterrole.rbac.authorization.k8s.io/weave-net created
clusterrolebinding.rbac.authorization.k8s.io/weave-net created
role.rbac.authorization.k8s.io/weave-net created
rolebinding.rbac.authorization.k8s.io/weave-net created
daemonset.apps/weave-net created
root@ip-172-31-86-217:/home/ubuntu# watch -n 1 kubectl get po -n kube-system
root@ip-172-31-86-217:/home/ubuntu# watch -n 1 kubectl get po -n kube-system
root@ip-172-31-86-217:/home/ubuntu# kubectl run minnupod --image=nginx
pod/minnupod created
root@ip-172-31-86-217:/home/ubuntu# kubectl get pod
NAME       READY   STATUS    RESTARTS   AGE
minnupod   1/1     Running   0          20s
root@ip-172-31-86-217:/home/ubuntu# kubectl get pod
NAME       READY   STATUS    RESTARTS   AGE
minnupod   1/1     Running   0          70s
root@ip-172-31-86-217:/home/ubuntu# 
root@ip-172-31-86-217:/home/ubuntu# kubectl get pod -o wide
NAME       READY   STATUS    RESTARTS   AGE   IP          NODE       NOMINATED NODE   READINESS GATES
minnupod   1/1     Running   0          84s   10.44.0.3   kworker1   <none>           <none>
root@ip-172-31-86-217:/home/ubuntu# kubectl get pod
NAME       READY   STATUS    RESTARTS   AGE
minnupod   1/1     Running   0          97s
root@ip-172-31-86-217:/home/ubuntu# kubectl get pod -o wide
NAME       READY   STATUS    RESTARTS   AGE    IP          NODE       NOMINATED NODE   READINESS GATES
minnupod   1/1     Running   0          105s   10.44.0.3   kworker1   <none>           <none>
root@ip-172-31-86-217:/home/ubuntu# curl 10.44.0.3
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>

