GIT Notes:

-> Open Source Distributed Version Control System
->  4 main areas : 
* working area
* staging area
* local repo
* remote repo

1. Brief History of Git
-------------------------------
- Developed in 2005 by Linus Torvalds (creator of Linux Kernel)
- Linux Kernel team was using BitKeeper (proprietary tool)
- BitKeeper revoked its free usage license for Linux community
- Linus Torvalds and the community created Git as a replacement
  - Speed
  - Simplicity
  - Strong support for non-linear development (branches)
  - Fully distributed system
  - Efficient handling of very large projects like the Linux Kernel

2. Evolution of Version Control
-------------------------------

A) Local Version Control Systems (Local VCS)
- Pros:
  - Simple
  - Easy for individual use
- Cons:
  - Error-prone
  - Manual copying leads to mistakes
  - Difficult history tracking

B) Centralized Version Control Systems (CVCS)
- Pros:
  - Central server holds the repository and history
  - Easier team collaboration
  - Supports access control
- Cons:
  - Single point of failure (if server is down, work stops)
  - Requires network connectivity
  - History is tied to server

C) Distributed Version Control Systems (DVCS)
- Pros:
  - Every user has a full copy of the repository with complete history
  - Local operations are fast (log, diff, checkout)
  - Work offline is possible
  - No single point of failure
  - Easy branching and merging
- Cons:
  - Slightly more complex for beginners
- Examples: Git


3. About Distributed VCS (Git)
-------------------------------
- Git is a distributed version control system
- Every user has a full copy of the repository including full history
- Most operations (status, log, diff, checkout) are local and fast
- Only git push and git pull need network access
- Git is designed to ensure data safety and prevent data loss

Three States in Git Workflow:
- Modified: File is changed but not staged
- Staged: File is marked to be committed
- Committed: File changes saved to local Git database

Core Components:
- Working Directory: Actual files you work on
- Staging Area (Index): Area where changes are prepared for commit
- Git Directory (.git): Where Git stores all data and history


4. Basic Git Commands

Clone an existing repository:
git clone <repo-url>

Add files to staging area:
git add <filename>
git add .   (adds all files)

Commit changes:
git commit -m "Your commit message"

Push to remote repository:
git push origin <branch-name>
git push origin main

Create a new branch:
git branch <branch-name>

Switch between branches:
git checkout <branch-name>

Create and switch to the branch immediately
git checkout -b <new branch-name> 


=======================
CONFLICT  (OCCURED WHEN I REMOTELY EDITED THE GIT, THEN PERFORMED SOME CHANGES LOCALLY AND TRIED TO PUSH)->(SOLN: FIRST PULL, THEN PUSH)
=====================
git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   docker.txt

no changes added to commit (use "git add" and/or "git commit -a")
minnu@hplaptop-minnu:~/UST/Training/notes/july19$ git add .
minnu@hplaptop-minnu:~/UST/Training/notes/july19$ git commit -m "add content"
[master 7eda229] add content
 1 file changed, 98 insertions(+)
minnu@hplaptop-minnu:~/UST/Training/notes/july19$ git push
Username for 'https://github.com': Minnu Antony
Password for 'https://Minnu%20Antony@github.com': 
To https://github.com/MinnuAntony/DevOps-Practice.git
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'https://github.com/MinnuAntony/DevOps-Practice.git'
hint: Updates were rejected because the remote contains work that you do not
hint: have locally. This is usually caused by another repository pushing to
hint: the same ref. If you want to integrate the remote changes, use
hint: 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
minnu@hplaptop-minnu:~/UST/Training/notes/july19$ 


Now Git is telling you why it rejected your push:

‚ùó Reason:
Your remote origin/master has some commits you don‚Äôt have locally.
That‚Äôs why Git says:

"Updates were rejected because the remote contains work that you do not have locally."

This usually happens if:

Someone else pushed changes directly to GitHub.

You created the repo with a README.md or .gitignore on GitHub, but never pulled it to your machine.

Or you pushed from another machine before.

üîß Solution:
You need to pull first, then push again.

‚úÖ Run these commands:
bash
Copy
Edit
git pull origin master --rebase
This will pull the changes and apply your commits on top of the latest remote commits.

If no conflicts:

bash
Copy
Edit
git push
üö© Why --rebase?
It avoids unnecessary merge commits and keeps your history clean.


